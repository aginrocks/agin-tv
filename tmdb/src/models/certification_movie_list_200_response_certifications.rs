/*
 * TMDB API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CertificationMovieList200ResponseCertifications {
    #[serde(rename = "AU", skip_serializing_if = "Option::is_none")]
    pub au: Option<Vec<models::CertificationMovieList200ResponseCertificationsAuInner>>,
    #[serde(rename = "BG", skip_serializing_if = "Option::is_none")]
    pub bg: Option<Vec<models::CertificationMovieList200ResponseCertificationsBgInner>>,
    #[serde(rename = "BR", skip_serializing_if = "Option::is_none")]
    pub br: Option<Vec<models::CertificationMovieList200ResponseCertificationsBrInner>>,
    #[serde(rename = "CA", skip_serializing_if = "Option::is_none")]
    pub ca: Option<Vec<models::CertificationMovieList200ResponseCertificationsCaInner>>,
    #[serde(rename = "CA-QC", skip_serializing_if = "Option::is_none")]
    pub ca_qc: Option<Vec<models::CertificationMovieList200ResponseCertificationsCaQcInner>>,
    #[serde(rename = "DE", skip_serializing_if = "Option::is_none")]
    pub de: Option<Vec<models::CertificationMovieList200ResponseCertificationsDeInner>>,
    #[serde(rename = "DK", skip_serializing_if = "Option::is_none")]
    pub dk: Option<Vec<models::CertificationMovieList200ResponseCertificationsCaQcInner>>,
    #[serde(rename = "ES", skip_serializing_if = "Option::is_none")]
    pub es: Option<Vec<models::CertificationMovieList200ResponseCertificationsEsInner>>,
    #[serde(rename = "FI", skip_serializing_if = "Option::is_none")]
    pub fi: Option<Vec<models::CertificationMovieList200ResponseCertificationsFiInner>>,
    #[serde(rename = "FR", skip_serializing_if = "Option::is_none")]
    pub fr: Option<Vec<models::CertificationMovieList200ResponseCertificationsFrInner>>,
    #[serde(rename = "GB", skip_serializing_if = "Option::is_none")]
    pub gb: Option<Vec<models::CertificationMovieList200ResponseCertificationsGbInner>>,
    #[serde(rename = "HU", skip_serializing_if = "Option::is_none")]
    pub hu: Option<Vec<models::CertificationMovieList200ResponseCertificationsHuInner>>,
    #[serde(rename = "IN", skip_serializing_if = "Option::is_none")]
    pub r#in: Option<Vec<models::CertificationMovieList200ResponseCertificationsInInner>>,
    #[serde(rename = "IT", skip_serializing_if = "Option::is_none")]
    pub it: Option<Vec<models::CertificationMovieList200ResponseCertificationsCaQcInner>>,
    #[serde(rename = "LT", skip_serializing_if = "Option::is_none")]
    pub lt: Option<Vec<models::CertificationMovieList200ResponseCertificationsCaQcInner>>,
    #[serde(rename = "MY", skip_serializing_if = "Option::is_none")]
    pub my: Option<Vec<models::CertificationMovieList200ResponseCertificationsCaQcInner>>,
    #[serde(rename = "NL", skip_serializing_if = "Option::is_none")]
    pub nl: Option<Vec<models::CertificationMovieList200ResponseCertificationsNlInner>>,
    #[serde(rename = "NO", skip_serializing_if = "Option::is_none")]
    pub no: Option<Vec<models::CertificationMovieList200ResponseCertificationsNoInner>>,
    #[serde(rename = "NZ", skip_serializing_if = "Option::is_none")]
    pub nz: Option<Vec<models::CertificationMovieList200ResponseCertificationsNzInner>>,
    #[serde(rename = "PH", skip_serializing_if = "Option::is_none")]
    pub ph: Option<Vec<models::CertificationMovieList200ResponseCertificationsCaQcInner>>,
    #[serde(rename = "PT", skip_serializing_if = "Option::is_none")]
    pub pt: Option<Vec<models::CertificationMovieList200ResponseCertificationsPtInner>>,
    #[serde(rename = "RU", skip_serializing_if = "Option::is_none")]
    pub ru: Option<Vec<models::CertificationMovieList200ResponseCertificationsRuInner>>,
    #[serde(rename = "SE", skip_serializing_if = "Option::is_none")]
    pub se: Option<Vec<models::CertificationMovieList200ResponseCertificationsSeInner>>,
    #[serde(rename = "US", skip_serializing_if = "Option::is_none")]
    pub us: Option<Vec<models::CertificationMovieList200ResponseCertificationsUsInner>>,
    #[serde(rename = "KR", skip_serializing_if = "Option::is_none")]
    pub kr: Option<Vec<models::CertificationMovieList200ResponseCertificationsKrInner>>,
    #[serde(rename = "SK", skip_serializing_if = "Option::is_none")]
    pub sk: Option<Vec<models::CertificationMovieList200ResponseCertificationsSkInner>>,
    #[serde(rename = "TH", skip_serializing_if = "Option::is_none")]
    pub th: Option<Vec<models::CertificationMovieList200ResponseCertificationsThInner>>,
    #[serde(rename = "MX", skip_serializing_if = "Option::is_none")]
    pub mx: Option<Vec<models::CertificationMovieList200ResponseCertificationsMxInner>>,
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub id: Option<Vec<models::CertificationMovieList200ResponseCertificationsIdInner>>,
    #[serde(rename = "TR", skip_serializing_if = "Option::is_none")]
    pub tr: Option<Vec<models::CertificationMovieList200ResponseCertificationsTrInner>>,
    #[serde(rename = "AR", skip_serializing_if = "Option::is_none")]
    pub ar: Option<Vec<models::CertificationMovieList200ResponseCertificationsArInner>>,
    #[serde(rename = "GR", skip_serializing_if = "Option::is_none")]
    pub gr: Option<Vec<models::CertificationMovieList200ResponseCertificationsGrInner>>,
    #[serde(rename = "TW", skip_serializing_if = "Option::is_none")]
    pub tw: Option<Vec<models::CertificationMovieList200ResponseCertificationsTwInner>>,
    #[serde(rename = "ZA", skip_serializing_if = "Option::is_none")]
    pub za: Option<Vec<models::CertificationMovieList200ResponseCertificationsZaInner>>,
    #[serde(rename = "SG", skip_serializing_if = "Option::is_none")]
    pub sg: Option<Vec<models::CertificationMovieList200ResponseCertificationsSgInner>>,
    #[serde(rename = "IE", skip_serializing_if = "Option::is_none")]
    pub ie: Option<Vec<models::CertificationMovieList200ResponseCertificationsIeInner>>,
    #[serde(rename = "PR", skip_serializing_if = "Option::is_none")]
    pub pr: Option<Vec<models::CertificationMovieList200ResponseCertificationsPrInner>>,
    #[serde(rename = "JP", skip_serializing_if = "Option::is_none")]
    pub jp: Option<Vec<models::CertificationMovieList200ResponseCertificationsJpInner>>,
    #[serde(rename = "VI", skip_serializing_if = "Option::is_none")]
    pub vi: Option<Vec<models::CertificationMovieList200ResponseCertificationsViInner>>,
    #[serde(rename = "CH", skip_serializing_if = "Option::is_none")]
    pub ch: Option<Vec<models::CertificationMovieList200ResponseCertificationsChInner>>,
    #[serde(rename = "IL", skip_serializing_if = "Option::is_none")]
    pub il: Option<Vec<models::CertificationMovieList200ResponseCertificationsIlInner>>,
    #[serde(rename = "HK", skip_serializing_if = "Option::is_none")]
    pub hk: Option<Vec<models::CertificationMovieList200ResponseCertificationsHkInner>>,
    #[serde(rename = "MO", skip_serializing_if = "Option::is_none")]
    pub mo: Option<Vec<models::CertificationMovieList200ResponseCertificationsMoInner>>,
    #[serde(rename = "LV", skip_serializing_if = "Option::is_none")]
    pub lv: Option<Vec<models::CertificationMovieList200ResponseCertificationsLvInner>>,
    #[serde(rename = "LU", skip_serializing_if = "Option::is_none")]
    pub lu: Option<Vec<models::CertificationMovieList200ResponseCertificationsLuInner>>,
}

impl CertificationMovieList200ResponseCertifications {
    pub fn new() -> CertificationMovieList200ResponseCertifications {
        CertificationMovieList200ResponseCertifications {
            au: None,
            bg: None,
            br: None,
            ca: None,
            ca_qc: None,
            de: None,
            dk: None,
            es: None,
            fi: None,
            fr: None,
            gb: None,
            hu: None,
            r#in: None,
            it: None,
            lt: None,
            my: None,
            nl: None,
            no: None,
            nz: None,
            ph: None,
            pt: None,
            ru: None,
            se: None,
            us: None,
            kr: None,
            sk: None,
            th: None,
            mx: None,
            id: None,
            tr: None,
            ar: None,
            gr: None,
            tw: None,
            za: None,
            sg: None,
            ie: None,
            pr: None,
            jp: None,
            vi: None,
            ch: None,
            il: None,
            hk: None,
            mo: None,
            lv: None,
            lu: None,
        }
    }
}

