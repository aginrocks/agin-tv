/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WelcomeRouteImport } from './routes/welcome'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppHomeRouteRouteImport } from './routes/app/home/route'
import { Route as AppHomeIndexRouteImport } from './routes/app/home/index'
import { Route as AppMovieMovieIdRouteImport } from './routes/app/movie/$movieId'

const WelcomeRoute = WelcomeRouteImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppHomeRouteRoute = AppHomeRouteRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppHomeIndexRoute = AppHomeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppHomeRouteRoute,
} as any)
const AppMovieMovieIdRoute = AppMovieMovieIdRouteImport.update({
  id: '/movie/$movieId',
  path: '/movie/$movieId',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/welcome': typeof WelcomeRoute
  '/app/home': typeof AppHomeRouteRouteWithChildren
  '/app/movie/$movieId': typeof AppMovieMovieIdRoute
  '/app/home/': typeof AppHomeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/welcome': typeof WelcomeRoute
  '/app/movie/$movieId': typeof AppMovieMovieIdRoute
  '/app/home': typeof AppHomeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/welcome': typeof WelcomeRoute
  '/app/home': typeof AppHomeRouteRouteWithChildren
  '/app/movie/$movieId': typeof AppMovieMovieIdRoute
  '/app/home/': typeof AppHomeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/welcome'
    | '/app/home'
    | '/app/movie/$movieId'
    | '/app/home/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/welcome' | '/app/movie/$movieId' | '/app/home'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/welcome'
    | '/app/home'
    | '/app/movie/$movieId'
    | '/app/home/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  WelcomeRoute: typeof WelcomeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/welcome': {
      id: '/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/home': {
      id: '/app/home'
      path: '/home'
      fullPath: '/app/home'
      preLoaderRoute: typeof AppHomeRouteRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/home/': {
      id: '/app/home/'
      path: '/'
      fullPath: '/app/home/'
      preLoaderRoute: typeof AppHomeIndexRouteImport
      parentRoute: typeof AppHomeRouteRoute
    }
    '/app/movie/$movieId': {
      id: '/app/movie/$movieId'
      path: '/movie/$movieId'
      fullPath: '/app/movie/$movieId'
      preLoaderRoute: typeof AppMovieMovieIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppHomeRouteRouteChildren {
  AppHomeIndexRoute: typeof AppHomeIndexRoute
}

const AppHomeRouteRouteChildren: AppHomeRouteRouteChildren = {
  AppHomeIndexRoute: AppHomeIndexRoute,
}

const AppHomeRouteRouteWithChildren = AppHomeRouteRoute._addFileChildren(
  AppHomeRouteRouteChildren,
)

interface AppRouteRouteChildren {
  AppHomeRouteRoute: typeof AppHomeRouteRouteWithChildren
  AppMovieMovieIdRoute: typeof AppMovieMovieIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppHomeRouteRoute: AppHomeRouteRouteWithChildren,
  AppMovieMovieIdRoute: AppMovieMovieIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  WelcomeRoute: WelcomeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
